package main

import (
    "github.com/go-martini/martini"
    "github.com/martini-contrib/render"
    "io/ioutil"
    "net/http"
    "log"
    "strconv"
    "time"
    "encoding/json"
)

func httpd() {
    m := martini.Classic()
    m.Use(render.Renderer())

    // Return index page for all routes handles on the client
    m.Get("/document/**", index)
    m.Get("/upload/**", index)

    m.Get("/api/document/:id", getDocument)
    m.Post("/api/document/:id/addFile", addFiles)
    m.Post("/api/document/:id/addFolder", addFolder)
    m.Post("/api/document/:id/GST", postGST)
    m.Get("/api/document/:id/content", getContent)
    m.Get("/api/document/:id/delete", getDocumentDelete)
    m.Run()
}

func index(res http.ResponseWriter, req *http.Request) {
    http.ServeFile(res, req, "public/index.html");
}

func getDocument(r render.Render, params martini.Params) {
    conn := OpenDatabase()
    defer conn.Close()

    id, err := strconv.ParseInt(params["id"], 10, 64)
    if (err != nil) {
        log.Println(err)
        r.Error(400)
        return;
    }

    doc := FetchDocAndContents(conn, id)
    r.JSON(200, doc)
}


func addFiles(r render.Render, req *http.Request, params martini.Params) {
    conn := OpenDatabase()
    defer conn.Close()

    id, err := strconv.ParseInt(params["id"], 10, 64)
    if (err != nil) {
        log.Println(err)
        r.Error(400)
        return;
    }

    err = req.ParseMultipartForm(10*1024*1024)
    if err != nil {
        log.Println(err)
        r.Error(500)
        return
    }

    if fhs := req.MultipartForm.File["file"]; len(fhs) > 0 {
        for i, fh := range fhs {
            log.Println(id, i, fh.Filename)
            file, err := fh.Open()
            if err != nil {
                log.Println(err)
                r.Error(500)
                return
            }

            fileContents, err := ioutil.ReadAll(file)
            if err != nil {
                log.Println(err)
                r.Error(500)
                return
            }

            mimeType := http.DetectContentType(fileContents)
            AddDocument(conn, id, fh.Filename, fh.Filename, mimeType, fileContents)
            file.Close()
        }
        r.Redirect("/document/"+params["id"])
        return
   } else {
        log.Println("No file")
        r.Error(400)
        return
   }
}


func addFile(r render.Render, req *http.Request, params martini.Params) {
    conn := OpenDatabase()
    defer conn.Close()

    id, err := strconv.ParseInt(params["id"], 10, 64)
    if (err != nil) {
        log.Println(err)
        r.Error(400)
        return;
    }

    file, header, err := req.FormFile("file")
    if (err != nil) {
        log.Println(err)
        r.Error(400)
        return;
    }

    fileContents, err := ioutil.ReadAll(file)
    if err != nil {
        log.Panic(err)
    }

    mimeType := http.DetectContentType(fileContents)

    AddDocument(conn, id, header.Filename, header.Filename, mimeType, fileContents)
    file.Close()

    r.Redirect("/")
}

func addFolder(r render.Render, req *http.Request, params martini.Params) {
    conn := OpenDatabase()
    defer conn.Close()

    parentId, err := strconv.ParseInt(params["id"], 10, 64)
    if (err != nil) {
        log.Println(err)
        r.Error(400)
        return;
    }

    name := req.FormValue("name")
    if (name == "") {
        log.Println("No Name")
        r.Error(400)
    }

    docId := AddDocument(conn, parentId, name, "", "folder", nil)
    r.JSON(200, docId)
}

func postGST(r render.Render, req *http.Request, params martini.Params) {
    conn := OpenDatabase()
    defer conn.Close()

    id, err := strconv.ParseInt(params["id"], 10, 64)
    if (err != nil) {
        log.Println(err)
        r.Error(400)
        return;
    }

    var GST GST

    err = json.NewDecoder(req.Body).Decode(&GST)
    if (err != nil) {
        log.Println(err)
        r.Error(500)
        return;
    }

    log.Println(id, GST)
    StoreGST(conn, id, GST)


    r.Status(200)
}


func getContent(res http.ResponseWriter, req *http.Request, params martini.Params) {
    conn := OpenDatabase()
    defer conn.Close()

    id, err := strconv.ParseInt(params["id"], 10, 64)
    if (err != nil) {
        log.Println(err)
        http.Error(res, "400 Bad Request", 400)
        return;
    }

    doc := FetchDocument(conn, id)
    if doc.Size == 0 {
        http.Error(res, "400 No Content", 404)
        return
    }
    blob := FetchBlob(conn, id)

    http.ServeContent(res, req, doc.Name, time.Time{}, blob)
    blob.Close()
}

func getDocumentDelete(res http.ResponseWriter, req *http.Request, params martini.Params) {
    conn := OpenDatabase()
    defer conn.Close()

    id, err := strconv.ParseInt(params["id"], 10, 64)
    log.Println("Delete", id)
    if err != nil {
        log.Println(err)
    } else {
        DeleteDocument(conn, id)
    }
    http.Redirect(res, req, "/", http.StatusSeeOther)
}
